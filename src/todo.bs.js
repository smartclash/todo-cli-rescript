// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Os = require("os");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

var helpString = "Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics";

var getToday = (function() {
  let date = new Date();
  return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
    .toISOString()
    .split("T")[0];
});

var encoding = "utf8";

var argv = process.argv;

var command = Caml_array.get(argv, 2);

var arg = Caml_array.get(argv, 3);

var pendingTodoFile = "todo.txt";

function isEmpty(text) {
  return text.trim().length > 0;
}

function help(param) {
  console.log(helpString);
  
}

function readFile(filename) {
  if (!Fs.existsSync(filename)) {
    return [];
  }
  var text = Fs.readFileSync(filename, {
        encoding: encoding,
        flag: "r"
      });
  return text.split(Os.EOL);
}

function appendToFile(filename, text) {
  Fs.appendFileSync(filename, text, {
        encoding: encoding,
        flag: "a+"
      });
  
}

function writeToFile(filename, lines) {
  var text = lines.join(Os.EOL);
  Fs.writeFileSync(filename, text, {
        encoding: encoding,
        flag: "w"
      });
  
}

function updateFile(filename, updaterFn) {
  var contents = readFile(filename);
  var modifiedContents = Curry._1(updaterFn, contents);
  return writeToFile(filename, modifiedContents);
}

function list(param) {
  var todos = readFile(pendingTodoFile);
  var todosLength = todos.length;
  if (todosLength === 0) {
    console.log("There are no pending todos!");
  } else {
    console.log(todos.reverse().map(function (todo, index) {
                return "[" + String(todosLength - index | 0) + "] " + todo;
              }).join("\n"));
  }
  
}

function addTodo(text) {
  if (isEmpty(text)) {
    console.log("Error: Missing todo string. Nothing added!");
  }
  updateFile(pendingTodoFile, (function (todos) {
          return todos.concat([text]);
        }));
  console.log("Added todo: " + text);
  
}

if (isEmpty(command)) {
  console.log(helpString);
} else {
  var match = command.trim().toLowerCase();
  switch (match) {
    case "add" :
        addTodo(arg);
        break;
    case "del" :
        console.log("del");
        break;
    case "done" :
        console.log("done");
        break;
    case "help" :
        console.log(helpString);
        break;
    case "ls" :
        list(undefined);
        break;
    case "report" :
        console.log("report");
        break;
    default:
      console.log(helpString);
  }
}

var completedTodoFile = "done.txt";

exports.helpString = helpString;
exports.getToday = getToday;
exports.encoding = encoding;
exports.argv = argv;
exports.command = command;
exports.arg = arg;
exports.pendingTodoFile = pendingTodoFile;
exports.completedTodoFile = completedTodoFile;
exports.isEmpty = isEmpty;
exports.help = help;
exports.readFile = readFile;
exports.appendToFile = appendToFile;
exports.writeToFile = writeToFile;
exports.updateFile = updateFile;
exports.list = list;
exports.addTodo = addTodo;
/* argv Not a pure module */
